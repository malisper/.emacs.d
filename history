;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by `savehist'.

(setq savehist-minibuffer-history-variables '(read-expression-history gnus-group-history bookmark-history search-ring cl-lookup-history common-lisp-hyperspec-history twittering-user-history dummy-hist twittering-tweet-history twittering-search-history minibuffer-history-search-history coding-system-history query-replace-history w3m-bookmark-title-history w3m-bookmark-section-history w3m-input-url-history Man-topic-history ido-buffer-history slime-inferior-lisp-program-history slime-read-expression-history yes-or-no-p-history slime-repl-shortcut-history buffer-name-history minibuffer-history file-name-history ido-file-history extended-command-history))
(setq read-expression-history '("(+ 1 2)"))
(setq gnus-group-history '("nntp+news.gmane.org:gmane.comp.java.clojure.user"))
(setq search-ring '("shell-pop" "_use_c" "shell-pop" "defa" "dir" "commitlogdire" "new" "time" "time " "bless" "interfaceagent" "shift " "shift" "@_" "leak" "clojuredbobje"))
(setq cl-lookup-history '("incf" "format"))
(setq common-lisp-hyperspec-history '("loop"))
(setq twittering-user-history '("nipra" "misc" "nipra" "cleotd" "nipra" "misc" "nipra" "ni" "nipra"))
(setq twittering-tweet-history '("Repeat the last command using C-x z. Try M-b, then C-x z followed by z z z z z .... to repeat [move backward one word]. #emacs" "`succintness -> succinctness' Let Emacs help you. Use M-$. #emacs" "@cleotd (apply array-map [:foo \"Ricky\" :bar \"Lucy\"])" "RT @fogus: A few people have asked if Trammel was my \"next big #Clojure project\" that I tweeted about earlier.  The answer is no, .. :-)" "Hahaha.. ``NaN === NaN is false. NaN !== NaN is true. This makes me angry.'' -- Douglas Crockford" "Hahaha.. ``NaN === NaN is false. NaN !== is true. This makes me angry.'' -- Douglas Crockford" "``Java + Scheme + Self ~> JavaScript''. Finished Part 1. Crockford on JavaScript. Amazing talk. Need to watch again." "RT @jeffscottbrown: #clojure project self sustainability enters the next level. http://j.mp/cS9rK4 (via @wmacgyver)" "Grrr.. already halted at dozen stations. Not supposed to have any normal stops. :-O" "On Erlang, side effect free programming, unit tests, ...: http://u.nu/8wjna" "Excellent. It certainly used to make me feel bad. Now it's OK. :-) RT @rakesh314: It's OK not to write unit tests http://bit.ly/bX9U7a " "Yay! Photon+ is working. On the way to Delhi. Lunch was good. A bit let down by Duronto. I was expecting better." "On Regular Expressions. :-) ``Remember, absolute power corrupts absolutely. But it also rocks absolutely.'' [via codinghorror]" "Pulldowns or not: http://codinghorror.typepad.com/.a/6a0120a85dcdae970b0120a85dd9b1970b-pi" "RT @mongodb: soon will support 64 indexes per collection instead of 40" "RT @chaitanya_gupta: @Cleartrip His opinion on Lisp eventually changed though http://news.ycombinator.com/item?id=1373489" "Gone." "RT @cemerick: Can we just agree that Tiobe's is an absurd way to \"rank\" langs? In any case, use what best solves your problem, not what's .." "RT @GreatestQuotes: \"Striving for excellence motivates you; striving for perfection is demoralizing.\" - Harriet Braiker" "I have been awakened from my hard earned sleep by these two fucking bats who are refusing to leave my room." "RT @cleotd: Use %& for a variadic argument list in #(): (#(vector %1 %2 %3 %&) 1 2 3 4 5 6) => [1 2 3 (4 5 6)] #clojure" "Hmm.. this looks good. :-) @fogus (defn bar [a & [{:keys [b] :or {b 5}}]] [a b]) [(bar 1 {:b 2}) (bar 1)] ; => [[1 2] [1 5]]" "@fogus (defn foo [a {:keys [b] :or {b 5}}] [a b]) [(foo 2 {}) (foo 2 {:b 1})] ; [[2 5] [2 1]] works but it's not like CL. :-)" "Didn't work. :-( @fogus (defn foo [a & {b :b :or {b 5}}] [a b]) (foo 1 :b 12) ; => [1 5]" "RT @pascalh1011: Hearing more and more praise for #MongoDB around the interwebs. Time for a proper investigation, methinks ..." "@craigandera I was talking about defn :-)" "And forgot to mention `*-supplied-p' too." "I really miss the Common Lisp like keyword params in Clojure." "I hate the words like `unless', `until', .... No wonder I like `when-not' in clojure. :-P" "RT @jnunemaker: Why MongoDB is Awesome slides: http://bit.ly/mongoawesome Only 40 minutes so I couldn't cover all the awesome. :) #devnation"))
(setq twittering-search-history '("#mongodb" "#clojure" "#mongodb" "#clojure" "#emacs" "common lisp" "#clojure" "#commonlisp" "common lisp" "#phillyete" "#emacs" "#clojure+OR+#emacs+OR+#lisp" "#lisp" "lisp" "clojure"))
(setq coding-system-history '("utf-8"))
(setq query-replace-history '("h/" "html/" "\"" "\\\"" "*master-coll-name*" "\"nse_fao_scrip_master\"" "sip-starting-date" "starting-date" "\"dd-MM-yyyy\"" "\"DD-MM-yyyy\"" ".emacs.d.nipra3" ".emacs.d"))
(setq w3m-bookmark-title-history '("MongoDB Driver [Java] v1.1" "Onlisp [html][offline]" "Onlisp [html][online]" "Google Reader" "Bookmarks" "EmacsWiki: WThree MHints And Tips" "Import Export Tools - MongoDB - 10gen Confluence" "Home - MongoDB - 10gen Confluence [MongoDB Documentation]" "There must be 50 ways to start your Mongo << Snail in a Turtleneck" "There must be 50 ways to start your Mongo Â« Snail in a Turtleneck" "Generated Javascript Documentation [mongo shell API]" "swannodette's enlive-tutorial at master - GitHub" "cgrand's enlive at master - GitHub" "Software transactional memory - Wikipedia, the free encyclopedia" "Immutable object - Wikipedia, the free encyclopedia" "Persistent data structure - Wikipedia, the free encyclopedia" "Mark Volkmann's Clojure Page" "Clojure - Overview" "Clojure Programming - Wikibooks, collection of open-content textbooks" "Common Lisp the Language, 2nd Edition" "Practical Common Lisp" "jeffh's clj-mongodb at master - GitHub" "somnium's congomongo at master - GitHub" "mattrepl's clojure-twitter at master - GitHub" "rnewman's clj-facebook at master - GitHub" "EmacsWiki: Category Gnus" "technomancy's leiningen at master - GitHub" "clj-sys's clj-time at master - GitHub" "http://github.com/clj-sys/clj-time" "Practical Common Lisp"))
(setq w3m-bookmark-section-history '("MongoDB" "Common Lisp" "Important" "Test" "Emacs" "MongoDB" "MongoDBArticles" "MongoDB" "Clojure Projects" "Wikipedia [CS]" "Wikipedia" "Clojure Resources" "Clojure" "Clojure Resources" "CommonLisp" "Clojure Projects" "Emacs" "Gnus" "ClojureProjects" "Clojure" "http://github.com/clj-sys/clj-time" "CommonLisp" "Emacs" "Clojure" "http://github.com/rnewman/clj-apache-http" "Misc" "Clojure"))
(setq w3m-input-url-history '("file:///home/nipra/Documents/Lisp/HyperSpec/Body/15_.htm" "http://www.infoq.com/articles/in-depth-look-clojure-collections#_ftn4" "http://www.mongodb.org/display/DOCS/Java+Tutorial" "http://www.mongodb.org/display/DOCS/Home;jsessionid=2D946C4853B63F156AABCB417381C9B3" "http://api.mongodb.org/js/index.html" "http://api.mongodb.org/java/1.1/com/mongodb/DB.html" "http://api.mongodb.org/java/1.1/index.html" "file:///home/nipra/Documents/Lisp/On Lisp/onlisp/onlisp_8.html#SEC49" "file:///home/nipra/Documents/Lisp/On Lisp/onlisp/onlisp.html" "http://gigamonkeys.com/book/" "about:" "about://bookmark/" "http://www.google.com/reader/m/view/" "http://www.emacswiki.org/emacs/WThreeMHintsAndTips" "reader.google.com" "http://www.mongodb.org/display/DOCS" "http://www.mongodb.org/display/DOCS/Replica+Pairs" "http://www.snailinaturtleneck.com/blog/2010/04/23/there-must-be-50-ways-to-start-your-mongo/" "http://api.mongodb.org/js/overview-summary.html" "http://news.ycombinator.com/" "http://github.com/cgrand/enlive/blob/c86e9b0956fd624be62b8ece696449e439d050e7/project.clj" "http://github.com/swannodette/enlive-tutorial/" "http://www.10gen.com/event_schemadesign_10apr27" "http://en.wikipedia.org/wiki/Software_transactional_memory" "http://en.wikipedia.org/wiki/Immutable_object" "http://en.wikipedia.org/wiki/Persistent_data_structure" "http://clojure.org/special_forms#toc13" "http://clojure.org/java_interop#dot" "http://java.ociweb.com/mark/clojure/" "http://richhickey.github.com/clojure/"))
(setq Man-topic-history '("cp" "mvn"))
(setq ido-buffer-history '("ter" "bs" "in" "*mes" "she" "mu" "she" "ini" "*mess" "*sc" "clj" "*sc" "mi" "ho" "*sc" "pro" "*sc" "imp" "index" "perlref" "con" "perfun" "func" "perl" "s" "cloju" "sp" "*sc" "sc" "*sc"))
(setq slime-inferior-lisp-program-history '("sbcl"))
(setq slime-read-expression-history '("m/fetch-one" "m/mongo!" "print" "defn" "==" "refer" "get-db" "md/mongo-connect" "cm/mongo!" "ccsu/indexed" "dotimes" "require" "ccp/pp" "lancet/ant" "lancet/-main" "ld/deps" "lc/project" "when-not" "->" "if-let" "if" "start" "Integer" "String" "java.util" "Calendar" "java.util.Date" "Date" "Matcher" "String"))
(setq yes-or-no-p-history '("yes" "no"))
(setq slime-repl-shortcut-history '("in" "quit" "in" "quit" "in" "quit" "in" "quit" "in" "quit" "in" "quit" "in" "quit" "in" "quit" "in" "quit" "in" "quit" "in" "quit" "in" "quit" "in" "quit" "in" "quit" "in" "quit"))
(setq buffer-name-history '("*terminal<1>*" "bson.py" "*Messages*" "shell-pop.el" "*Messages*" "*scratch*" "init-common.el" "shell-pop.el" "*Messages*" "clj" "*scratch*" "clj" ":search/#clojure/" "clj" "*slime-repl clojure*" ":search/#mongodb/" "*scratch*" "clj" "*scratch*" "nipra/important" ":home" "*scratch*" "cass" "project.clj /home/nipra/Projects/clojure-projects/scratch/" "*scratch*" "project.clj" "project.clj /home/nipra/Projects/clojure-projects/scratch/" "clj" "nipra/important" "Defaults.pm"))
(setq minibuffer-history '("origin" "master" "init-common" "initsplit" "init.el" "init-common" "/bin/bash" "ansi-term" "shell-pop" "ansi-term" "multi-term" "init-common" "shell-pop" "init-common" "nipra" "misc" "important" "nipra" "misc" "important" "nipra" "misc" "important" "nipra" "misc" "important" "nipra" "misc" "important" "nipra"))
(setq file-name-history '("~/.emacs.d/init-common.el" "~/src/py-stuff/mongo-python-driver/pymongo/_cbsonmodule.c" "~/src/py-stuff/mongo-python-driver/pymongo/bson.py" "/home/nipra/src/py-stuff/mongo-python-driver/pymongo/_cbsonmodule.c" "~/src/py-stuff/mongo-python-driver/pymongo/__init__.py" "~/src/py-stuff/mongo-python-driver/setup.py" "~/.emacs.d/shell-pop.el" "~/.emacs.d/shell-pop.el" "~/.emacs.d/shell-pop.el" "~/.emacs.d/shell-pop.el" "/home/nipra/.emacs.d/config-clj.el" "/home/nipra/.emacs.d/init-clj.el" "/home/nipra/Projects/clojure-projects/scratch/src/multimethods.clj" "/home/nipra/Documents/Clojure/Programming Clojure.pdf" "/home/nipra/Projects/clojure-projects/cassandra-fun/project.clj" "/home/nipra/src/clojure-stuff/clj-cassandra/project.clj" "/home/nipra/Projects/clojure-projects/scratch/project.clj" "/home/nipra/src/clojure-stuff/clj-cassandra/project.clj" "/home/nipra/Softwares/Cassandra/apache-cassandra-0.6.1/conf/log4j.properties" "/home/nipra/Softwares/Cassandra/apache-cassandra-0.6.1/conf/storage-conf.xml" "/home/nipra/cleartrip/repos/air/trunk/systems/ita/ita-query.lisp" "/home/nipra/cleartrip/repos/air/trunk/search-international/air.search-international.asd" "/home/nipra/cleartrip/repos/air/trunk/search-international/display-search-results.lisp" "/home/nipra/src/pl-stuff/otrs-2.4.7/Kernel/Config.pm.dist" "/home/nipra/src/pl-stuff/otrs-2.4.7/Kernel/Config/Defaults.pm" "/home/nipra/src/pl-stuff/otrs-2.4.7/Kernel/Config.pm.dist" "~/src/pl-stuff/otrs-2.4.7/Kernel/System/Auth.pm" "/home/nipra/src/pl-stuff/otrs-2.4.7/Kernel/System/Web/Request.pm" "~/src/pl-stuff/otrs-2.4.7/Kernel/Config/Defaults.pm" "/home/nipra/src/pl-stuff/otrs-2.4.7/Kernel/Config.pm.dist"))
(setq ido-file-history '("_c" "mongo" "py" "sr" "conf" "ini" "Proj" "In" "scr" "proj" "S" "Proj" "In" "Sp" "Pr" "In" "sc" "Proj" "Inf" "P" "Do" "cass" "Proj" "pro" "Proj" "pr" "cass" "cloju" "sr" "lo"))
(setq extended-command-history '("magit-status" "find-library" "multi-term" "find-library" "multi-term" "find-library" "load-file" "find-library" "shell-pop" "find-library" "multi-term" "find-library" "ansi-term" "paredit-mode" "ielm" "shell-pop" "shell-pop-set-internal-mode" "load-file" "find-library" "shell-pop" "load-file" "find-library" "load-file" "shell-pop" "load-file" "find-library" "shell-pop-set-internal-mode" "load-file" "find-library" "ielm"))
